upstream api {     # apiserver
    server apiserver:8000;
}
upstream model {     # modelserver
    server modelserver:5000;
}
server {    
    listen 8080;
    # server 블럭에서 어떤 도메인을 라우팅 할 것인지 결정
    server_name localhost;
    charset utf-8;

    # 요청받은 url로 연결
    location /api/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        # proxy_connect_timeout 300s;
        # proxy_read_timeout 600s;
        # proxy_send_timeout 600s;
        # proxy_buffer_size          128k;
        # proxy_buffers              4 256k;
        # proxy_busy_buffers_size    256k;
        # api/ 경로로 들어올 경우 api으로 포워딩 
        proxy_pass http://api;
    }
    # 요청받은 url로 연결
    location /model/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        # proxy_connect_timeout 300s;
        # proxy_read_timeout 600s;
        # proxy_send_timeout 600s;
        # proxy_buffer_size          128k;
        # proxy_buffers              4 256k;
        # proxy_busy_buffers_size    256k;
        # api/ 경로로 들어올 경우 api으로 포워딩 
        proxy_pass http://model;
    }
    
    # static 파일 디렉토리 연결
    location /staticfiles {
        alias /apiserver/staticfiles;       # alias : 이 경로에서 찾기
    }
    # media 파일 디렉토리 연결
    location /mediafiles {
        alias /modelserver/mediafiles;
    }
    # ignore cache frontend
    location ~* (service-worker\.js)$ {
        add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        expires off;
        proxy_no_cache 1;
    }

    # -> 3000번 포트로 요청 전송
    location / { 
        # server_name에 해당하는 도메인이 있을 때, root 폴더를 지정할 수 있습니다. reverse forwading의 경우 생략됩니다.
        root /var/www/frontend;
        try_files $uri $uri/ /index.html?q=$uri&$args;    
    }
}