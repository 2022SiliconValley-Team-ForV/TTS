# 도커파일은 빌드할때 반영
# 도커컴포즈는 업할때 반영
version: "3"

services:
  frontend:
    build:
      # context : 현재 폴더의 frontend 폴더에 있는 도커파일을 쓰겠다.
      context: ./frontend
   # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    command: [ "npm", "start" ] 
    restart: always
    ports:
    # 왼쪽이 도커 바깥(외부에서 접근할 포트번호) / 오른쪽이 도커 내부(컨테이너 내부)
      - 3000:3000
    # 가상 네트워크 연결
    networks:
      - tts
    volumes:
      # 왼쪽이 우리 컴퓨터, 오른쪽이 도커 컨테이너
      # 리눅스 컨테이너의 프론트엔드 폴더에 우리 컴퓨터의 프론트엔드 폴더를 공유하겠다.
      # 서로 바뀐 부분 적용됨
      - ./frontend/:/frontend
      - ./frontend/node_modules/:/frontend/node_modules
    
    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:5000
    tty: true
  
  apiserver:
    build:
    # context : 현재 폴더의 backend 폴더에 있는 도커파일을 쓰겠다.
      context: ./backend/apiserver
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
      
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    command: sh -c "/wait && python manage.py makemigrations && python manage.py makemigrations mainApp && python manage.py migrate && python db_init.py && python manage.py runserver 0.0.0.0:8000"
    
    # restart : 실패하면 재시작
    restart: on-failure
    ports:
    # 왼쪽이 도커 바깥(외부에서 접근할 포트번호) / 오른쪽이 도커 내부(컨테이너 내부)
      - 8000:8000
    volumes:
     # 왼쪽이 우리 컴퓨터, 오른쪽이 도커 컨테이너
     # 리눅스 컨테이너의 백엔드 폴더에 우리 컴퓨터의 백엔드 폴더를 공유하겠다.
     # 서로 바뀐 부분 적용됨
      - ./backend/apiserver/:/backend/apiserver/
    # 가상 네트워크 연결
    networks:
      - tts
    # 이걸해야 db뜨고 백엔드가 실행됨
    depends_on:
      - ttsmysql

  modelserver:
    platform: linux/amd64
    build: ./backend/modelserver
    command: flask run --host=0.0.0.0
    ports:
      - 5000:5000
    volumes:
      - ./backend/modelserver/:/backend/modelserver/

  ttsmysql:
    image: mysql
    command: --lower_case_table_names=1
    container_name: ttsmysql # 컨테이너 이름 설정
    ports:
      - "3306:3306"
    environment: # -e 옵션
      - MYSQL_DATABASE=tts
      - MYSQL_USER = root
      - MYSQL_ROOT_PASSWORD=1234  # MYSQL 패스워드 설정 옵션
      - TZ=Asia/Seoul
    # 가상 네트워크 연결
    networks:
      - tts

  rabbit:
      hostname: tts_host
      image: rabbitmq:3-management
      command: rabbitmq-server
      #컨테이너를 stop 시키기 전까지 항상 재시작
      restart: unless-stopped
      # 환경변수 설정 - 설정하면 접속이 안되서 주석처리.
      environment:
        - RABBITMQ_DEFAULT_USER=tts
        - RABBITMQ_DEFAULT_PASS=tts123
        - RABBITMQ_DEFAULT_VHOST=tts_host
      ports:
        - 5672:5672    # 이 포트로는 접속 안됨. 나중에 더 알아보고 추가할 예정
        - 15672:15672  # 이 포트로 접근해서 guest/guest 입력
      volumes:
      - ./backend:/var/lib/rabbitmq
      # 가상 네트워크 연결
      networks:
        - tts
      depends_on:
        - backend

  celery:
    build:
      context: ./backend/apiserver
      # dockerfile: Dockerfile
    # 컨테이너를 stop 시키기 전까지 항상 재시작
    restart: unless-stopped
    # 환경변수 파일로 지정 - 아직 파일 안만들어서 주석처리함.  
    # env_file:
    #   - ./settings/.env
    depends_on:
      - rabbit
      - apiserver
    # 가상 네트워크 연결
    networks:
      - tts
    command: ["celery","-A", "rabbitcelery.celery", "worker", "--loglevel=info"]  
    volumes:
      - ./backend/apiserver:/backend/apiserver


networks:
  tts:
    driver: bridge
