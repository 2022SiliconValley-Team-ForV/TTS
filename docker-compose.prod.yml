# 실행 방법
# docker-compose -f docker-compose.prod.yml up
version: "3"

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
    command: [ "npm", "start" ] 
    restart: on-failure
    # ports:
    # # 왼쪽이 도커 바깥(외부에서 접근할 포트번호) / 오른쪽이 도커 내부(컨테이너 내부)
    #   - 3000:3000
    # expose:
    #   - 3000
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules 
    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true    # HMR을 위해 필요한 설정
      - REACT_APP_BACKEND_URL=http://localhost:8000
    stdin_open: true      # react-script 3.4.1 부터 필요
    tty: true
  
  apiserver:
    container_name: apiserver
    build:
      context: ./backend/apiserver
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    command: gunicorn config.wsgi --preload --bind 0.0.0.0:8000 --timeout 240
    # restart : 실패하면 재시작
    restart: on-failure
    ports:
      - 8000:8000
    volumes:
      - static_volume:/backend/staticfiles
      - ./backend/apiserver/:/backend/apiserver/
    # 이걸해야 db뜨고 백엔드가 실행됨
    depends_on:
      - ttsmysql
    expose:
      - 8000

  ttsmysql:
    image: mysql
    command: --lower_case_table_names=1
    container_name: ttsmysql # 컨테이너 이름 설정
    ports:
      - "3306:3306"
    environment: 
      - MYSQL_DATABASE=tts
      - MYSQL_USER='root'
      - MYSQL_ROOT_PASSWORD=1234  # MYSQL 패스워드 설정 옵션
      - TZ=Asia/Seoul

  modelserver:
    container_name: modelserver
    build: ./backend/modelserver
      # dockerfile: Dockerfile
    # 컨테이너를 stop 시키기 전까지 항상 재시작
    ports:
      - 5000:5000
    restart: unless-stopped
    # 환경변수 파일로 지정 - 아직 파일 안만들어서 주석처리함.  
    # env_file:
    #   - ./settings/.env
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
    command: ["python3", "-m","gunicorn", "app:app", "--bind", "0.0.0.0:5000", "--timeout", "240"]
    volumes:
      - media_volume:/backend/mediafiles
      #- ./backend/modelserver:/backend/modelserver

  rabbit:
      hostname: tts_host
      image: rabbitmq:3-management
      command: rabbitmq-server
      #컨테이너를 stop 시키기 전까지 항상 재시작
      restart: unless-stopped
      # 환경변수 설정 - 설정하면 접속이 안되서 주석처리.
      environment:
        - RABBITMQ_DEFAULT_USER=tts
        - RABBITMQ_DEFAULT_PASS=tts123
        - RABBITMQ_DEFAULT_VHOST=tts_host
      ports:
        - 5672:5672    # 이 포트로는 접속 안됨. 나중에 더 알아보고 추가할 예정
        - 15672:15672  # 이 포트로 접근해서 guest/guest 입력
      volumes:
      - ./backend:/var/lib/rabbitmq
      depends_on:
        - modelserver
      expose:
        - 5672

  celery:
    build: ./backend/modelserver
    restart: unless-stopped
    depends_on:
      - "rabbit"
      - "modelserver"
    command: ["celery","-A", "celery_app", "worker", "--loglevel=info"]
    volumes:
      - ./backend:/backend

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - 81:8080
    restart: unless-stopped
    volumes:
      - static_volume:/backend/staticfiles
      - media_volume:/backend/mediafiles
      - build_folder:/var/www/frontend
    depends_on:
      - apiserver
      - frontend

# 컨테이너 내려도 데이터 유지되도록 함
volumes:
  static_volume: null
  media_volume: null
  build_folder: null